swagger: '2.0'
info:
  description: "erster Entwurf einer Datenzugriffs-API, die den Zugriff auf die KomMonitor-Datenhaltungsschicht kapselt."
  version: "0.0.1"
  title: "KomMonitor Data Access API"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "christian.danowski-buhren@hs-bochum.de"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:8085"
basePath: "/management"
tags:
- name: "topics"
  description: "Topic information"
- name: "roles"
  description: "Role information"
- name: "users"
  description: "User information"
- name: "spatial-units"
  description: "spatial units/levels, for which indicators can be associated (e.g. rastercells, building blocks, quarters, city districts, city boroughs, city)"
- name: "georesources"
  description: "Georesource necessary for the computation of indicators (e.g. land use, locations of schools, streets/ways)"
- name: "indicators"
  description: "indicators"
- name: "process-scripts"
  description: "Interfaces to manage process scripts"
schemes:
- "http"
- "https"
securityDefinitions:
  # basicAuth: abcdef12345
   basicAuth:
     type: basic

security:
  - basicAuth: []

paths:

  /topics:
    post:
      tags:
      - "topics"
      summary: "Register a new topic"
      description: "Add/Register a topic"
      operationId: "addTopic"
      consumes:
      - "application/json"
      parameters:
      - name: "topic-data"
        in: "body"
        description: "topic input data"
        required: true
        schema:
          $ref: "#/definitions/TopicInputType"
      responses:
        201:
          description: "Created"
          headers:
            location:
              type: string
              description: identifier of the created topic
        401:
          $ref: "#/responses/UnauthorizedError"
        405:
          description: "Invalid input"
    get:
      tags:
      - "topics"
      summary: "retrieve information about available topics"
      description: "retrieve information about available topics"
      operationId: "getTopics"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            type: array
            items:
              $ref: '#/definitions/TopicOverviewType'
        401:
          $ref: "#/responses/UnauthorizedError"
        400:
          description: "Invalid status value"

  /topics/{topicId}:
    parameters:
      - name: "topicId"
        in: "path"
        description: "unique identifier of the topic"
        required: true
        type: string
    get:
      tags:
      - "topics"
      summary: "retrieve information about the selected topic"
      description: "retrieve information about the selected topic"
      operationId: "getTopicById"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            $ref: '#/definitions/TopicOverviewType'
        401:
          $ref: "#/responses/UnauthorizedError"
        400:
          description: "Invalid status value"
    put:
      tags:
      - "topics"
      summary: "Modify topic information"
      description: "Modify topic information"
      operationId: "updateTopic"
      consumes:
      - "application/json"
      parameters:
      - name: "topic-data"
        in: "body"
        description: "topic input data"
        required: true
        schema:
          $ref: "#/definitions/TopicInputType"
      responses:
        200:
          description: "OK"
          headers:
            location:
              type: string
              description: identifier of the modified topic
        401:
          $ref: "#/responses/UnauthorizedError"
        405:
          description: "Invalid input"
    delete:
      tags:
      - "topics"
      summary: "Delete the topic"
      description: "Delete the topic"
      operationId: "deleteTopic"
      responses:
        200:
          description: "OK"
        401:
          $ref: "#/responses/UnauthorizedError"

  /roles:
    post:
      tags:
      - "roles"
      summary: "Register a new role"
      description: "Add/Register a role"
      operationId: "addRole"
      consumes:
      - "application/json"
      parameters:
      - name: "role-data"
        in: "body"
        description: "role input data"
        required: true
        schema:
          $ref: "#/definitions/RoleInputType"
      responses:
        201:
          description: "Created"
          headers:
            location:
              type: string
              description: identifier of the created role
        401:
          $ref: "#/responses/UnauthorizedError"
        405:
          description: "Invalid input"
    get:
      tags:
      - "roles"
      summary: "retrieve information about available roles"
      description: "retrieve information about available roles"
      operationId: "getRoles"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            type: array
            items:
              $ref: '#/definitions/RoleOverviewType'
        401:
          $ref: "#/responses/UnauthorizedError"
        400:
          description: "Invalid status value"

  /roles/{roleId}:
    parameters:
      - name: "roleId"
        in: "path"
        description: "unique identifier of the role"
        required: true
        type: string
    put:
      tags:
      - "roles"
      summary: "Modify role information"
      description: "Modify role information"
      operationId: "updateRole"
      consumes:
      - "application/json"
      parameters:
      - name: "role-data"
        in: "body"
        description: "role input data"
        required: true
        schema:
          $ref: "#/definitions/RoleInputType"
      responses:
        200:
          description: "OK"
          headers:
            location:
              type: string
              description: identifier of the modified role
        401:
          $ref: "#/responses/UnauthorizedError"
        405:
          description: "Invalid input"
    get:
      tags:
      - "roles"
      summary: "retrieve information about the selected role"
      description: "retrieve information about the selected role"
      operationId: "getRoleById"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            $ref: '#/definitions/RoleOverviewType'
        401:
          $ref: "#/responses/UnauthorizedError"
        400:
          description: "Invalid status value"
    delete:
      tags:
      - "roles"
      summary: "Delete the role"
      description: "Delete the role"
      operationId: "deleteRole"
      responses:
        200:
          description: "OK"
        401:
          $ref: "#/responses/UnauthorizedError"

  /users:
    post:
      tags:
      - "users"
      summary: "Register a new user"
      description: "Add/Register a user"
      operationId: "addUser"
      consumes:
      - "application/json"
      parameters:
      - name: "user-data"
        in: "body"
        description: "user data"
        required: true
        schema:
          $ref: "#/definitions/UserInputType"
      responses:
        201:
          description: "Created"
          headers:
            location:
              type: string
              description: identifier of the created user
        401:
          $ref: "#/responses/UnauthorizedError"
        405:
          description: "Invalid input"
    get:
      tags:
      - "users"
      summary: "retrieve information about available users and their roles"
      description: "retrieve information about available users and their roles"
      operationId: "getUsers"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            type: array
            items:
              $ref: '#/definitions/UserOverviewType'
        401:
          $ref: "#/responses/UnauthorizedError"
        400:
          description: "Invalid status value"

  /users/{userId}:
    parameters:
      - name: "userId"
        in: "path"
        description: "unique identifier of the user"
        required: true
        type: string
    put:
      tags:
      - "users"
      summary: "Modify user information"
      description: "Modify user information"
      operationId: "updateUser"
      consumes:
      - "application/json"
      parameters:
      - name: "user-data"
        in: "body"
        description: "user data"
        required: true
        schema:
          $ref: "#/definitions/UserInputType"
      responses:
        200:
          description: "OK"
          headers:
            location:
              type: string
              description: identifier of the modified user
        401:
          $ref: "#/responses/UnauthorizedError"
        405:
          description: "Invalid input"
    get:
      tags:
      - "users"
      summary: "retrieve information about the selected user and his/her role"
      description: "retrieve information about the selected user and his/her role"
      operationId: "getUserById"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            $ref: '#/definitions/UserOverviewType'
        401:
          $ref: "#/responses/UnauthorizedError"
        400:
          description: "Invalid status value"
    delete:
      tags:
      - "users"
      summary: "Delete the user"
      description: "Delete the user"
      operationId: "deleteUser"
      responses:
        200:
          description: "OK"
        401:
          $ref: "#/responses/UnauthorizedError"


  /spatial-units:
    post:
      tags:
      - "spatial-units"
      summary: "Add a new spatial-unit"
      description: "Add/Register a spatial unit for a certain period of time"
      operationId: "addSpatialUnitAsBody"
      consumes:
      - "application/json"
      parameters:
      - name: "feature-data"
        in: "body"
        description: "feature data"
        required: true
        schema:
          $ref: "#/definitions/SpatialUnitPOSTInputType"
      responses:
        201:
          description: "Created"
          headers:
            location:
              type: string
              description: identifier of the created spatial unit resource
        401:
          $ref: "#/responses/UnauthorizedError"
        405:
          description: "Invalid input"
    get:
      tags:
      - "spatial-units"
      summary: "retrieve information about available features of different spatial units/levels"
      description: "retrieve information about available features of different spatial units/levels"
      operationId: "getSpatialUnits"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            type: array
            items:
              $ref: '#/definitions/SpatialUnitOverviewType'
        401:
          $ref: "#/responses/UnauthorizedError"
        400:
          description: "Invalid status value"

  /spatial-units/{spatialUnitId}:
    parameters:
      - name: "spatialUnitId"
        in: "path"
        description: "the unique identifier of the spatial level"
        required: true
        type: string
    get:
      tags:
      - "spatial-units"
      summary: "retrieve information about available features of the selected spatial unit/level"
      description: "retrieve information about available features of the selected spatial unit/level"
      operationId: "getSpatialUnitsById"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            $ref: '#/definitions/SpatialUnitOverviewType'
        401:
          $ref: "#/responses/UnauthorizedError"
        400:
          description: "Invalid status value"
    put:
      tags:
      - "spatial-units"
      summary: "Modify/Update the features of the selected spatial-unit"
      description: "Modify/Update the features of the selected spatial-unit. The interface expects a full upload of all geometries for the spatial unit. Internally, those geometries are compared to the existing ones to mark 'old' geometries that are no longer in use as outdated. Hence, each geometric object is only persisted once and its use is controlled by time validity marks."
      operationId: "updateSpatialUnitAsBody"
      consumes:
      - "application/json"
      parameters:
      - name: "feature-data"
        in: "body"
        description: "feature data"
        required: true
        schema:
          $ref: "#/definitions/SpatialUnitPUTInputType"
      responses:
        200:
          description: "OK"
          headers:
            location:
              type: string
              description: identifier of the created spatial unit resource
        401:
          $ref: "#/responses/UnauthorizedError"
        405:
          description: "Invalid input"
    patch:
      tags:
      - "spatial-units"
      summary: "Modify/Update the metadata of the selected spatial-unit"
      description: "Modify/Update the metadata of the selected spatial-unit. This replaces the formerly stored metadata."
      operationId: "updateSpatialUnitMetadataAsBody"
      consumes:
      - "application/json"
      parameters:
      - name: "metadata"
        in: "body"
        description: "metadata input"
        required: true
        schema:
          $ref: "#/definitions/SpatialUnitPATCHInputType"
      responses:
        200:
          description: "OK"
          headers:
            location:
              type: string
              description: identifier of the created spatial unit resource
        401:
          $ref: "#/responses/UnauthorizedError"
        405:
          description: "Invalid input"
    delete:
      tags:
      - "spatial-units"
      summary: "Delete the features/contents of the selected spatial-unit"
      description: "Delete the features/contents of the selected spatial-unit"
      operationId: "deleteSpatialUnitById"
      responses:
        200:
          description: "OK"
        401:
          $ref: "#/responses/UnauthorizedError"

  /spatial-units/{spatialUnitId}/schema:
    parameters:
      - name: "spatialUnitId"
        in: "path"
        description: "the unique identifier of the spatial level"
        required: true
        type: string
    get:
      tags:
      - "spatial-units"
      summary: "retrieve the JSON schema for the selected spatial unit/level"
      description: "retrieve the JSON schema for the selected spatial unit/level. The JSON schema indicates the property structure of the dataset."
      operationId: "getSpatialUnitsSchemaById"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            type: string
        400:
          description: "Invalid status value"
        401:
          $ref: "#/responses/UnauthorizedError"

  /spatial-units/{spatialUnitId}/allFeatures:
    parameters:
      - name: "spatialUnitId"
        in: "path"
        description: "the unique identifier of the spatial level"
        required: true
        type: string
    get:
      tags:
      - "spatial-units"
      summary: "retrieve all feature entries for all applicable periods of validity for the selected spatial unit/level (hence might contain each feature multiple times if they exist for different periods of validity)"
      description: "retrieve all feature entries for all applicable periods of validity for the selected spatial unit/level (hence might contain each feature multiple times if they exist for different periods of validity)"
      operationId: "getAllSpatialUnitFeaturesById"
      parameters:
        - name: "simplifyGeometries"
          in: "query"
          description: "Controls simplification of feature geometries. Each option will preserve topology to neighbour features. Simplification increases from 'weak' to 'strong', while 'original' will return original feature geometries without any simplification."
          required: false
          type: string
          default: original
          enum:
            - original
            - weak
            - medium
            - strong
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            type: string
        400:
          description: "Invalid status value"
        401:
          $ref: "#/responses/UnauthorizedError"
    delete:
      tags:
      - "spatial-units"
      summary: "Delete all features/contents of the selected spatial-unit dataset"
      description: "Delete all features/contents of the selected spatial-unit dataset"
      operationId: "deleteAllSpatialUnitFeaturesById"
      responses:
        200:
          description: "OK"
        401:
          $ref: "#/responses/UnauthorizedError"

  /spatial-units/{spatialUnitId}/{year}/{month}/{day}:
    parameters:
      - name: "spatialUnitId"
        in: "path"
        description: "the unique identifier of the spatial level"
        required: true
        type: string
      - name: "year"
        in: "path"
        description: "year for which datasets shall be queried"
        required: true
        type: "number"
        format: "int32"
      - name: "month"
        in: "path"
        description: "month for which datasets shall be queried"
        required: true
        type: "number"
        format: "int32"
      - name: "day"
        in: "path"
        description: "day for which datasets shall be queried"
        required: true
        type: "number"
        format: "int32"
    get:
      tags:
      - "spatial-units"
      summary: "retrieve the features according to the selected spatial unit/level and selected year and month as GeoJSON"
      description: "retrieve the features according to the selected spatial unit/level and selected year and month as GeoJSON"
      operationId: "getSpatialUnitsByIdAndYearAndMonth"
      produces:
      - "application/octed-stream"
      parameters:
        - name: "simplifyGeometries"
          in: "query"
          description: "Controls simplification of feature geometries. Each option will preserve topology to neighbour features. Simplification increases from 'weak' to 'strong', while 'original' will return original feature geometries without any simplification."
          required: false
          type: string
          default: original
          enum:
            - original
            - weak
            - medium
            - strong
      responses:
        200:
          description: "OK"
          schema:
            type: string
            format: byte
        400:
          description: "Invalid status value"
        401:
          $ref: "#/responses/UnauthorizedError"
    delete:
      tags:
      - "spatial-units"
      summary: "Delete the features/contents of the selected spatial-unit, year and month"
      description: "Delete the features/contents of the selected spatial-unit, year and month"
      operationId: "deleteSpatialUnitByIdAndYearAndMonth"
      responses:
        200:
          description: "OK"
        401:
          $ref: "#/responses/UnauthorizedError"

  ########## GEO RESOURCES
  /georesources:
    post:
      tags:
      - "georesources"
      summary: "Add a new geo-resource"
      description: "Add/Register a geo-resource dataset for a certain period of time"
      operationId: "addGeoresourceAsBody"
      consumes:
      - "application/json"
      parameters:
      - name: "feature-data"
        in: "body"
        description: "feature data"
        required: true
        schema:
          $ref: "#/definitions/GeoresourcePOSTInputType"
      responses:
        201:
          description: "Created"
          headers:
            location:
              type: string
              description: identifier of the created geo-resource resource
        401:
          $ref: "#/responses/UnauthorizedError"
        405:
          description: "Invalid input"
    get:
      tags:
      - "georesources"
      summary: "retrieve information about available features of different geo-resource datasets"
      description: "retrieve information about available features of different geo-resource datasets"
      operationId: "getGeoresources"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            type: array
            items:
              $ref: '#/definitions/GeoresourceOverviewType'
        400:
          description: "Invalid status value"
        401:
          $ref: "#/responses/UnauthorizedError"

  /georesources/{georesourceId}:
    parameters:
      - name: "georesourceId"
        in: "path"
        description: "identifier of the geo-resource dataset"
        required: true
        type: string
    get:
      tags:
      - "georesources"
      summary: "retrieve information about available features of the selected geo-resource dataset"
      description: "retrieve information about available features of the selected geo-resource dataset"
      operationId: "getGeoresourceById"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            $ref: '#/definitions/GeoresourceOverviewType'
        401:
          $ref: "#/responses/UnauthorizedError"
        400:
          description: "Invalid status value"
    put:
      tags:
      - "georesources"
      summary: "Modify/Update the features of the selected geo-resource dataset"
      description: "Modify/Update the features of the selected geo-resource dataset.  The interface expects a full upload of all geometries for the spatial unit. Internally, those geometries are compared to the existing ones to mark 'old' geometries that are no longer in use as outdated. Hence, each geometric object is only persisted once and its use is controlled by time validity marks."
      operationId: "updateGeoresourceAsBody"
      consumes:
      - "application/json"
      parameters:
      - name: "feature-data"
        in: "body"
        description: "feature data"
        required: true
        schema:
          $ref: "#/definitions/GeoresourcePUTInputType"
      responses:
        200:
          description: "OK"
          headers:
            location:
              type: string
              description: identifier of the created geo-resource dataset
        401:
          $ref: "#/responses/UnauthorizedError"
        405:
          description: "Invalid input"
    patch:
      tags:
      - "georesources"
      summary: "Modify/Update the metadata of the selected geo-resource dataset"
      description: "Modify/Update the metadata of the selected geo-resource dataset. This replaces the formerly stored metadata."
      operationId: "updateGeoresourceMetadataAsBody"
      consumes:
      - "application/json"
      parameters:
      - name: "metadata"
        in: "body"
        description: "metadata input"
        required: true
        schema:
          $ref: "#/definitions/GeoresourcePATCHInputType"
      responses:
        200:
          description: "OK"
          headers:
            location:
              type: string
              description: identifier of the created geo-resource dataset
        401:
          $ref: "#/responses/UnauthorizedError"
        405:
          description: "Invalid input"
    delete:
      tags:
      - "georesources"
      summary: "Delete the features/contents of the selected geo-resource dataset"
      description: "Delete the features/contents of the selected geo-resource dataset"
      operationId: "deleteGeoresourceById"
      responses:
        200:
          description: "OK"
        401:
          $ref: "#/responses/UnauthorizedError"

  /georesources/{georesourceId}/schema:
    parameters:
      - name: "georesourceId"
        in: "path"
        description: "the identifier of the geo-resource dataset"
        required: true
        type: string
    get:
      tags:
      - "georesources"
      summary: "retrieve the JSON schema for the selected geo-resource dataset"
      description: "retrieve the JSON schema for the selected geo-resource dataset. The JSON schema indicates the property structure of the dataset."
      operationId: "getGeoresourceSchemaByLevel"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            type: string
        400:
          description: "Invalid status value"
        401:
          $ref: "#/responses/UnauthorizedError"

  /georesources/{georesourceId}/allFeatures:
    parameters:
      - name: "georesourceId"
        in: "path"
        description: "the identifier of the geo-resource dataset"
        required: true
        type: string
    get:
      tags:
      - "georesources"
      summary: "retrieve all feature entries for all applicable periods of validity for the selected geo-resource dataset (hence might contain each feature multiple times if they exist for different periods of validity)"
      description: "retrieve all feature entries for all applicable periods of validity for the selected geo-resource dataset (hence might contain each feature multiple times if they exist for different periods of validity)"
      operationId: "getAllGeoresourceFeaturesById"
      parameters:
        - name: "simplifyGeometries"
          in: "query"
          description: "Controls simplification of feature geometries. Each option will preserve topology to neighbour features. Simplification increases from 'weak' to 'strong', while 'original' will return original feature geometries without any simplification."
          required: false
          type: string
          default: original
          enum:
            - original
            - weak
            - medium
            - strong
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            type: string
        400:
          description: "Invalid status value"
        401:
          $ref: "#/responses/UnauthorizedError"
    delete:
      tags:
      - "georesources"
      summary: "Delete all features/contents of the selected geo-resource dataset"
      description: "Delete all features/contents of the selected geo-resource dataset"
      operationId: "deleteAllGeoresourceFeaturesById"
      responses:
        200:
          description: "OK"
        401:
          $ref: "#/responses/UnauthorizedError"

  /georesources/{georesourceId}/{year}/{month}/{day}:
    parameters:
      - name: "georesourceId"
        in: "path"
        description: "identifier of the geo-resource dataset"
        required: true
        type: string
      - name: "year"
        in: "path"
        description: "year for which datasets shall be queried"
        required: true
        type: "number"
        format: "int32"
      - name: "month"
        in: "path"
        description: "month for which datasets shall be queried"
        required: true
        type: "number"
        format: "int32"
      - name: "day"
        in: "path"
        description: "day for which datasets shall be queried"
        required: true
        type: "number"
        format: "int32"
    get:
      tags:
      - "georesources"
      summary: "retrieve the features according to the selected geo-resource dataset and selected year and month as GeoJSON"
      description: "retrieve the features according to the selected geo-resource dataset and selected year and month as GeoJSON"
      operationId: "getGeoresourceByIdAndYearAndMonth"
      parameters:
        - name: "simplifyGeometries"
          in: "query"
          description: "Controls simplification of feature geometries. Each option will preserve topology to neighbour features. Simplification increases from 'weak' to 'strong', while 'original' will return original feature geometries without any simplification."
          required: false
          type: string
          default: original
          enum:
            - original
            - weak
            - medium
            - strong
      produces:
      - "application/octed-stream"
      responses:
        200:
          description: "OK"
          schema:
            type: string
            format: byte
        400:
          description: "Invalid status value"
        401:
          $ref: "#/responses/UnauthorizedError"
    delete:
      tags:
      - "georesources"
      summary: "Delete the features/contents of the selected geo-resource dataset, selected by year and month"
      description: "Delete the features/contents of the selected geo-resource dataset, selected by year and month"
      operationId: "deleteGeoresourceByIdAndYearAndMonth"
      responses:
        200:
          description: "OK"
        401:
          $ref: "#/responses/UnauthorizedError"



######## INDICATORS
  /indicators:
      post:
        tags:
        - "indicators"
        summary: "Add a new indicator dataset"
        description: "Add/Register an indicator dataset for a certain period of time and spatial unit/level"
        operationId: "addIndicatorAsBody"
        consumes:
        - "application/json"
        parameters:
        - name: "indicator-data"
          in: "body"
          description: "indicator data"
          required: true
          schema:
            $ref: '#/definitions/IndicatorPOSTInputType'
        responses:
          201:
            description: "Created"
            headers:
              location:
                type: string
                description: identifier of the created indicator
          405:
            description: "Invalid input"
      get:
        tags:
        - "indicators"
        summary: "retrieve information about available indicators"
        description: "retrieve information about available indicators"
        operationId: "getIndicators"
        produces:
        - "application/json"
        responses:
          200:
            description: "OK"
            schema:
              type: array
              items:
                $ref: '#/definitions/IndicatorOverviewType'
          401:
            $ref: "#/responses/UnauthorizedError"
          400:
            description: "Invalid status value"

  /indicators/{indicatorId}:
      parameters:
      - name: "indicatorId"
        in: "path"
        description: "unique identifier of the selected indicator dataset"
        required: true
        type: string
      get:
          tags:
          - "indicators"
          summary: "retrieve information about the selected indicator"
          description: "retrieve information about the selected indicator"
          operationId: "getIndicatorById"
          produces:
          - "application/json"
          responses:
            200:
              description: "OK"
              schema:
                $ref: '#/definitions/IndicatorOverviewType'
            400:
              description: "Invalid status value"
            401:
              $ref: "#/responses/UnauthorizedError"
      put:
        tags:
        - "indicators"
        summary: "Modify/Update the contents of the selected indicator dataset"
        description: "Modify/Update the contents of the selected indicator dataset"
        operationId: "updateIndicatorAsBody"
        consumes:
        - "application/json"
        parameters:
        - name: "indicator-data"
          in: "body"
          description: "indicator data"
          required: true
          schema:
            $ref: '#/definitions/IndicatorPUTInputType'
        responses:
          200:
            description: "OK - Updated"
            headers:
              location:
                type: string
                description: identifier of the modified indicator
          401:
            $ref: "#/responses/UnauthorizedError"
          405:
            description: "Invalid input"
      patch:
        tags:
        - "indicators"
        summary: "Modify/Update the metadata of the selected indicator dataset"
        description: "Modify/Update the metadata of the selected indicator dataset. This replaces the formerly stored metadata."
        operationId: "updateIndicatorMetadataAsBody"
        consumes:
        - "application/json"
        parameters:
        - name: "metadata"
          in: "body"
          description: "metadata input"
          required: true
          schema:
            $ref: '#/definitions/IndicatorMetadataPATCHInputType'
        responses:
          200:
            description: "OK"
            headers:
              location:
                type: string
                description: identifier of the modified indicator
          401:
            $ref: "#/responses/UnauthorizedError"
          405:
            description: "Invalid input"
      delete:
        tags:
        - "indicators"
        summary: "Delete the features/contents of the selected indicator dataset"
        description: "Delete the features/contents of the selected indicator dataset"
        operationId: "deleteIndicatorById"
        responses:
          200:
            description: "OK"
          401:
            $ref: "#/responses/UnauthorizedError"

  /indicators/{indicatorId}/{spatialUnitId}:
      parameters:
      - name: "indicatorId"
        in: "path"
        description: "unique identifier of the selected indicator dataset"
        required: true
        type: string
      - name: "spatialUnitId"
        in: "path"
        description: "the unique identifier of the spatial level"
        required: true
        type: string
      get:
          tags:
          - "indicators"
          summary: "retrieve the indicator for the selected spatial unit as GeoJSON"
          description: "retrieve the indicator for the selected spatial unit as GeoJSON"
          operationId: "getIndicatorBySpatialUnitIdAndId"
          parameters:
            - name: "simplifyGeometries"
              in: "query"
              description: "Controls simplification of feature geometries. Each option will preserve topology to neighbour features. Simplification increases from 'weak' to 'strong', while 'original' will return original feature geometries without any simplification."
              required: false
              type: string
              default: original
              enum:
                - original
                - weak
                - medium
                - strong
          produces:
          - "application/octed-stream"
          responses:
            200:
              description: "OK"
              schema:
                type: string
                format: byte
            400:
              description: "Invalid status value"
            401:
              $ref: "#/responses/UnauthorizedError"
      delete:
        tags:
        - "indicators"
        summary: "Delete the features/contents of the selected indicator dataset for the selected spatial unit"
        description: "Delete the features/contents of the selected indicator dataset for the selected spatial unit"
        operationId: "deleteIndicatorByIdAndSpatialUnitId"
        responses:
          200:
            description: "OK"
          401:
            $ref: "#/responses/UnauthorizedError"
      patch:
        tags:
          - indicators-controller
        summary: Modify/Update the selected indicator dataset
        operationId: updateIndicatorRolesUsingPATCH
        consumes:
          - application/json
        produces:
          - application/octed-stream
        parameters:
          - in: body
            name: indicatorData
            description: indicatorData
            required: true
            schema:
              $ref: '#/definitions/IndicatorPATCHInputType'
          - name: indicatorId
            in: path
            description: indicatorId
            required: true
            type: string
          - name: spatialUnitId
            in: path
            description: spatialUnitId
            required: true
            type: string
        responses:
          '200':
            description: OK
          '204':
            description: No Content
          '401':
            description: API key is missing or invalid
          '403':
            description: Forbidden
          '405':
            description: Invalid input

  /indicators/{indicatorId}/{spatialUnitId}/without-geometry:
      parameters:
      - name: "indicatorId"
        in: "path"
        description: "unique identifier of the selected indicator dataset"
        required: true
        type: string
      - name: "spatialUnitId"
        in: "path"
        description: "the unique identifier of the spatial level"
        required: true
        type: string
      get:
          tags:
          - "indicators"
          summary: "retrieve the indicator values and other properties for the selected spatial unit. It does not include the spatial geometries!"
          description: "retrieve the indicator values and other properties for the selected spatial unit. It does not include the spatial geometries!"
          operationId: "getIndicatorBySpatialUnitIdAndIdWithoutGeometry"
          produces:
          - "application/json"
          responses:
            200:
              description: "OK"
              schema:
                type: array
                items:
                  $ref: "#/definitions/IndicatorPropertiesWithoutGeomType"
            400:
              description: "Invalid status value"
            401:
              $ref: "#/responses/UnauthorizedError"

  /indicators/{indicatorId}/{spatialUnitId}/{year}/{month}/{day}:
      parameters:
      - name: "indicatorId"
        in: "path"
        description: "unique identifier of the selected indicator dataset"
        required: true
        type: string
      - name: "spatialUnitId"
        in: "path"
        description: "the unique identifier of the spatial level"
        required: true
        type: string
      - name: "year"
        in: "path"
        description: "year for which the indicator shall be queried"
        required: true
        type: "number"
        format: "int32"
      - name: "month"
        in: "path"
        description: "month for which the indicator shall be queried"
        required: true
        type: "number"
        format: "int32"
      - name: "day"
        in: "path"
        description: "day for which datasets shall be queried"
        required: true
        type: "number"
        format: "int32"
      get:
          tags:
          - "indicators"
          summary: "retrieve the indicator for the selected spatial unit, year and month as GeoJSON"
          description: "retrieve the indicator for the selected spatial unit, year and month as GeoJSON"
          operationId: "getIndicatorBySpatialUnitIdAndIdAndYearAndMonth"
          parameters:
            - name: "simplifyGeometries"
              in: "query"
              description: "Controls simplification of feature geometries. Each option will preserve topology to neighbour features. Simplification increases from 'weak' to 'strong', while 'original' will return original feature geometries without any simplification."
              required: false
              type: string
              default: original
              enum:
                - original
                - weak
                - medium
                - strong
          produces:
          - "application/octed-stream"
          responses:
            200:
              description: "OK"
              schema:
                type: string
                format: byte
            400:
              description: "Invalid status value"
            401:
              $ref: "#/responses/UnauthorizedError"
      delete:
        tags:
        - "indicators"
        summary: "Delete the features/contents of the selected indicator dataset, selected by year and month"
        description: "Delete the features/contents of the selected indicator dataset, selected by year and month"
        operationId: "deleteIndicatorByIdAndYearAndMonth"
        responses:
          200:
            description: "OK"
          401:
            $ref: "#/responses/UnauthorizedError"

  /indicators/{indicatorId}/{spatialUnitId}/{year}/{month}/{day}/without-geometry:
      parameters:
      - name: "indicatorId"
        in: "path"
        description: "unique identifier of the selected indicator dataset"
        required: true
        type: string
      - name: "spatialUnitId"
        in: "path"
        description: "the unique identifier of the spatial level"
        required: true
        type: string
      - name: "year"
        in: "path"
        description: "year for which the indicator shall be queried"
        required: true
        type: "number"
        format: "int32"
      - name: "month"
        in: "path"
        description: "month for which the indicator shall be queried"
        required: true
        type: "number"
        format: "int32"
      - name: "day"
        in: "path"
        description: "day for which datasets shall be queried"
        required: true
        type: "number"
        format: "int32"
      get:
          tags:
          - "indicators"
          summary: "retrieve the indicator values and other properties for the selected spatial unit, year and month. It does not include the spatial geometries!"
          description: "retrieve the indicator values and other properties for the selected spatial unit, year and month. It does not include the spatial geometries!"
          operationId: "getIndicatorBySpatialUnitIdAndIdAndYearAndMonthWithoutGeometry"
          produces:
          - "application/json"
          responses:
            200:
              description: "OK"
              schema:
                type: array
                items:
                  $ref: "#/definitions/IndicatorPropertiesWithoutGeomType"
            400:
              description: "Invalid status value"
            401:
              $ref: "#/responses/UnauthorizedError"


######## PROCESS SCRIPTS
  /process-scripts:
      post:
        tags:
        - "process-scripts"
        summary: "Register a new process script"
        description: "Register a process script associated to a certain indicator"
        operationId: "addProcessScriptAsBody"
        consumes:
        - "application/json"
        parameters:
        - name: "process-script-data"
          in: "body"
          description: "details necessary to register the process script"
          required: true
          schema:
            $ref: '#/definitions/ProcessScriptPOSTInputType'
        responses:
          201:
            description: "Created"
            headers:
              location:
                type: string
                description: identifier of the created process script
          401:
            $ref: "#/responses/UnauthorizedError"
          405:
            description: "Invalid input"
      get:
        tags:
        - "process-scripts"
        summary: "retrieve information about available process scripts"
        description: "retrieve information about available process scripts"
        operationId: "getProcessScripts"
        produces:
        - "application/json"
        responses:
          200:
            description: "OK"
            schema:
              type: array
              items:
                $ref: '#/definitions/ProcessScriptOverviewType'
          400:
            description: "Invalid status value"
          401:
            $ref: "#/responses/UnauthorizedError"


  /process-scripts/usingIndicatorId/{indicatorId}:
    parameters:
    - name: "indicatorId"
      in: "path"
      description: "unique identifier of the selected indicator dataset"
      required: true
      type: string
    get:
      tags:
      - "process-scripts"
      summary: "retrieve information about the associated process script for a certain indicator"
      description: "retrieve information about the associated process script for a certain indicator"
      operationId: "getProcessScriptForIndicator"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            $ref: '#/definitions/ProcessScriptOverviewType'
        400:
          description: "Invalid status value"
        401:
          $ref: "#/responses/UnauthorizedError"
    put:
      tags:
      - "process-scripts"
      summary: "Modify/Update an existing process script"
      description: "Modify/Update an existing process script associated to a certain indicator"
      operationId: "updateProcessScriptAsBody"
      consumes:
      - "application/json"
      parameters:
      - name: "process-script-data"
        in: "body"
        description: "details necessary to modify the process script"
        required: true
        schema:
          $ref: '#/definitions/ProcessScriptPUTInputType'
      responses:
        200:
          description: "OK"
          headers:
            location:
              type: string
              description: identifier of the created process script
        401:
          $ref: "#/responses/UnauthorizedError"
        405:
          description: "Invalid input"
    delete:
      tags:
      - "process-scripts"
      summary: "Delete the process script"
      description: "Delete the process script associated to the specified indicator"
      operationId: "deleteProcessScript"
      responses:
        200:
          description: "OK"
        401:
          $ref: "#/responses/UnauthorizedError"

  /process-scripts/usingIndicatorId/{indicatorId}/scriptCode:
    parameters:
    - name: "indicatorId"
      in: "path"
      description: "unique identifier of the selected indicator dataset"
      required: true
      type: string
    get:
      tags:
      - "process-scripts"
      summary: "retrieve the process script code associated to a certain indicator as JavaScript file"
      description: "retrieve the process script code associated to a certain indicator as JavaScript file"
      operationId: "getProcessScriptCodeForIndicator"
      produces:
      - "application/javascript"
      responses:
        200:
          description: "OK"
          schema:
            type: string
            format: byte
            description: the JavaScript NodeJS code containing executable code to compute the associated indicator.
        400:
          description: "Invalid status value"
        401:
          $ref: "#/responses/UnauthorizedError"

  /process-scripts/{scriptId}:
    parameters:
    - name: "scriptId"
      in: "path"
      description: "unique identifier of the selected script"
      required: true
      type: string
    get:
      tags:
      - "process-scripts"
      summary: "retrieve information about the associated process script for a certain scriptId"
      description: "retrieve information about the associated process script for a certain scriptId"
      operationId: "getProcessScriptForScriptId"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            $ref: '#/definitions/ProcessScriptOverviewType'
        400:
          description: "Invalid status value"
        401:
          $ref: "#/responses/UnauthorizedError"
    put:
      tags:
      - "process-scripts"
      summary: "Modify/Update an existing process script"
      description: "Modify/Update an existing process script associated to a certain scriptId"
      operationId: "updateProcessScriptAsBodyByScriptId"
      consumes:
      - "application/json"
      parameters:
      - name: "process-script-data"
        in: "body"
        description: "details necessary to modify the process script"
        required: true
        schema:
          $ref: '#/definitions/ProcessScriptPUTInputType'
      responses:
        200:
          description: "OK"
          headers:
            location:
              type: string
              description: identifier of the created process script
        401:
          $ref: "#/responses/UnauthorizedError"
        405:
          description: "Invalid input"
    delete:
      tags:
      - "process-scripts"
      summary: "Delete the process script"
      description: "Delete the process script associated to the specified scriptId"
      operationId: "deleteProcessScriptByScriptId"
      responses:
        200:
          description: "OK"
        401:
          $ref: "#/responses/UnauthorizedError"

  /process-scripts/{scriptId}/scriptCode:
    parameters:
    - name: "scriptId"
      in: "path"
      description: "unique identifier of the selected script"
      required: true
      type: string
    get:
      tags:
      - "process-scripts"
      summary: "retrieve the process script code associated to a certain indicator as JavaScript file"
      description: "retrieve the process script code associated to a certain indicator as JavaScript file"
      operationId: "getProcessScriptCode"
      produces:
      - "application/javascript"
      responses:
        200:
          description: "OK"
          schema:
            type: string
            format: byte
            description: the JavaScript NodeJS code containing executable code to compute the associated indicator.
        400:
          description: "Invalid status value"
        401:
          $ref: "#/responses/UnauthorizedError"

  /process-scripts/template:
    get:
      tags:
      - "process-scripts"
      summary: "retrieve an empty script template, that defines how to implement process scripts for KomMonitor as JavaScript file."
      description: "retrieve an empty script template, that defines how to implement process scripts for KomMonitor. The script works as a template for a NodeJS module. Hence, it predefines required methods that are called by the executing processing engine (a NodeJS runtimne environment). As a script developer, those predefined methods have to be implemented. The template contains detailed documentation on how to implement those methods."
      operationId: "getProcessScriptTemplate"
      produces:
      - "application/javascript"
      responses:
        200:
          description: "OK"
          schema:
            type: string
            format: byte
            description: the JavaScript NodeJS code containing executable code to compute the associated indicator.
        400:
          description: "Invalid status value"
        401:
          $ref: "#/responses/UnauthorizedError"


responses:
  UnauthorizedError:
    description: API key is missing or invalid
    headers:
      WWW_Authenticate:
        type: string
        
definitions:

  ProcessScriptPOSTInputType:
    type: object
    required:
      - name
      - description
      - associatedIndicatorId
      - scriptCodeBase64
      - requiredIndicatorIds
      - requiredGeoresourceIds
      - variableProcessParameters
    properties:
      name:
        type: string
        description: name of the process script
      description:
        type: string
        description: short description of the scripts content (what does it do)
      associatedIndicatorId:
        type: string
        description: unique identifier of the associated indicator (e.g. the indicator that is computed by a script or for which the values shall be aggregated to another spatial unit)
      scriptCodeBase64:
        type: string
        description: the actual script code (JavaScript) as BASE64 encoded string
      requiredIndicatorIds:
        type: array
        description: identifiers of indicators that are used within the script.
        items:
          type: string
      requiredGeoresourceIds:
        type: array
        description: identifiers of georesources that are used within the script.
        items:
          type: string
      variableProcessParameters:
        type: array
        description: list of process parameters that can be set by an expert user. They are used within the script to parameterize the indicator computation
        items:
          $ref: '#/definitions/ProcessInputType'

  ProcessScriptPUTInputType:
    type: object
    required:
      - name
      - description
      - scriptCodeBase64
      - requiredIndicatorIds
      - requiredGeoresourceIds
      - variableProcessParameters
    properties:
      name:
        type: string
        description: name of the process script
      description:
        type: string
        description: short description of the scripts content (what does it do)
      scriptCodeBase64:
        type: string
        description: the actual script code (JavaScript) as BASE64 encoded string
      requiredIndicatorIds:
        type: array
        description: identifiers of indicators that are used within the script.
        items:
          type: string
      requiredGeoresourceIds:
        type: array
        description: identifiers of georesources that are used within the script.
        items:
          type: string
      variableProcessParameters:
        type: array
        description: list of process parameters that can be set by an expert user. They are used within the script to parameterize the indicator computation
        items:
          $ref: '#/definitions/ProcessInputType'

  ProcessInputType:
    type: object
    required:
      - name
      - description
      - dataType
      - defaultValue
    properties:
      name:
        type: string
        description: the name of the process input parameter
      description:
        type: string
        description: a short description of the process input
      dataType:
        type: string
        description: the data type of the process input
        enum:
          - string
          - boolean
          - integer
          - double
      defaultValue:
        type: string
        description: the default value of the process parameter
      maxParameterValueForNumericInputs:
        type: number
        description: the maximum value that is allowed for the process parameter
      minParameterValueForNumericInputs:
        type: number
        description: the minimum value that is allowed for the process parameter

  ProcessOutputType:
    type: object
    required:
      - name
      - description
      - dataType
    properties:
      name:
        type: string
        description: the name of the process output parameter
      description:
        type: string
        description: a short description of the process output
      dataType:
        type: string
        description: the data type of the process output
        enum:
          - boolean # for scripts that compute an indicator and persist it via Data Access API
          - GeoJSON

  ProcessScriptOverviewType:
    type: object
    required:
      - name
      - description
      - scriptId
      - indicatorId
      - requiredIndicatorIds
      - requiredGeoresourceIds
      - variableProcessParameters
    properties:
      name:
        type: string
        description: name of the process script
      description:
        type: string
        description: short description of the scripts content (what does it do)
      scriptId:
        type: string
        description: unique identifier of the process script
      indicatorId:
        type: string
        description: unique identifier of the associated indicator (e.g. the indicator that is computed by a script or for which the values shall be aggregated to another spatial unit)
      requiredIndicatorIds:
        type: array
        description: identifiers of indicators that are used within the script.
        items:
          type: string
      requiredGeoresourceIds:
        type: array
        description: identifiers of georesources that are used within the script.
        items:
          type: string
      variableProcessParameters:
        type: array
        description: list of process parameters that can be set by an expert user. They are used within the script to parameterize the indicator computation
        items:
          $ref: '#/definitions/ProcessInputType'

  TopicInputType:
    type: "object"
    required:
      - topicName
      - topicDescription
      - topicType
    properties:
      topicId:
        type: string
        description: the topic identifier
      topicName:
        type: string
        description: the topic name
      topicDescription:
        type: string
        description: short description of the topic
      topicType:
        type: string
        description: topic type indicating if the topic object is a subtopic or a main topic - only topics of type 'sub' shall be subTopics of topics with type 'main'
        enum:
          - main
          - sub
      topicResource:
        type: string
        description: topic resource indicating if the topic object corresponds to an indicator or to a georesource
        enum:
          - indicator
          - georesource
      subTopics:
        type: array
        description: optional list of subTopics
        items:
          $ref: '#/definitions/TopicInputType'

  TopicOverviewType:
    type: "object"
    required:
      - topicId
      - topicName
      - topicDescription
      - topicType
    properties:
      topicId:
        type: string
        description: the identifier of the topic
      topicName:
        type: string
        description: the topic name
      topicDescription:
        type: string
        description: short description of the topic
      topicType:
        type: string
        description: topic type indicating if the topic object is a subtopic or a main topic - only topics of type 'sub' shall be subTopics of topics with type 'main'
        enum:
          - main
          - sub
      topicResource:
        type: string
        description: topic resource indicating if the topic object corresponds to an indicator or to a georesource
        enum:
          - indicator
          - georesource    
      subTopics:
        type: array
        description: optional list of subTopics
        items:
          $ref: '#/definitions/TopicOverviewType'

  RoleInputType:
    type: "object"
    required:
      - roleName
    properties:
      roleName:
        type: string
        description: the role name

  RoleOverviewType:
    type: "object"
    required:
      - roleId
      - roleName
    properties:
      roleId:
        type: string
        description: the unique role identifier
      roleName:
        type: string
        description: the role name

  UserInputType:
    type: "object"
    required:
      - userName
      - password
      - roles
    properties:
      userName:
        type: string
        description: the user name from the login credentials
      password:
        type: string
        description: the user password from the login credentials
      roles:
        type: array
        description: list of role identifiers; the user is associated with the rights/priviledges of each specififed role.
        items:
          type: string
          description: the roleId of the role, that shall be applioed to the user

  UserOverviewType:
    type: "object"
    required:
      - userId
      - userName
      - roles
    properties:
      userId:
        type: string
        description: the unique identifier of the user
      userName:
        type: string
        description: the user name from the login credentials
      roles:
        type: array
        description: list of roles the user is associated with
        items:
          $ref: '#/definitions/RoleOverviewType'

  SpatialUnitPOSTInputType:
    type: "object"
    required:
      - spatialUnitLevel
      - periodOfValidity
      - metadata
    properties:
      spatialUnitLevel:
        type: string
        description: the name and identifier of the spatial unit level the features apply to
      periodOfValidity:
        $ref: "#/definitions/PeriodOfValidityType"
      metadata:
        $ref: "#/definitions/CommonMetadataType"
      nextLowerHierarchyLevel:
        type: string
        description: the identifier/name of the spatial unit level that contains the features of the nearest lower hierarchy level
      nextUpperHierarchyLevel:
        type: string
        description: the identifier/name of the spatial unit level that contains the features of the nearest upper hierarchy level
      jsonSchema:
            type: "string"
            description: "a JSON schema as string that defines the data model for this dataset. It can be used to validate the geoJsonString property."
      geoJsonString:
            type: "string"
            description: "a valid GeoJSON string containing the features consisting of a geometry and a unique identifier as property 'uuid'"
      allowedRoles:
        type: array
        description: list of role identifiers that have read access rights for this dataset
        items:
          type: string

  SpatialUnitPATCHInputType:
    type: "object"
    required:
      - metadata
    properties:
      metadata:
        $ref: "#/definitions/CommonMetadataType"
      nextLowerHierarchyLevel:
        type: string
        description: the identifier/name of the spatial unit level that contains the features of the nearest lower hierarchy level
      nextUpperHierarchyLevel:
        type: string
        description: the identifier/name of the spatial unit level that contains the features of the nearest upper hierarchy level
      allowedRoles:
        type: array
        description: list of role identifiers that have read access rights for this dataset
        items:
          type: string

  SpatialUnitPUTInputType:
    type: "object"
    required:
      - periodOfValidity
      - geoJsonString
    properties:
      periodOfValidity:
        $ref: "#/definitions/PeriodOfValidityType"
      geoJsonString:
            type: "string"
            description: "a valid GeoJSON string containing the features consisting of a geometry and a unique identifier as property 'uuid'"

  SpatialUnitOverviewType:
    type: "object"
    required:
      - spatialUnitId
      - spatialUnitLevel
      - metadata
      - nextLowerHierarchyLevel
      - nextUpperHierarchyLevel
      - availablePeriodsOfValidity
      - wmsUrl
      - wfsUrl
    properties:
      spatialUnitId:
        type: string
        description: the unique identifier of the spatial unit level the features apply to
      spatialUnitLevel:
        type: string
        description: the name of the spatial unit level the features apply to
      metadata:
        $ref: "#/definitions/CommonMetadataType"
      nextLowerHierarchyLevel:
        type: string
        description: the identifier/name of the spatial unit level that contains the features of the nearest lower hierarchy level
      nextUpperHierarchyLevel:
        type: string
        description: the identifier/name of the spatial unit level that contains the features of the nearest upper hierarchy level
      availablePeriodsOfValidity:
        $ref: "#/definitions/AvailablePeriodsOfValidityType"
      wmsUrl:
        type: string
        description: the URL of a running WMS instance serving the spatial features of the associated dataset
      wfsUrl:
        type: string
        description: the URL of a running WFS instance serving the spatial features of the associated dataset

  GeoresourcePOSTInputType:
    type: "object"
    required:
      - datasetName
      - periodOfValidity
      - metadata
    properties:
      datasetName:
        type: string
        description: the meaningful name of the dataset
      periodOfValidity:
        $ref: "#/definitions/PeriodOfValidityType"
      metadata:
        $ref: "#/definitions/CommonMetadataType"
      allowedRoles:
        type: array
        description: list of role identifiers that have read access rights for this dataset
        items:
          type: string
      topicReference:
        type: string
        description: "id of the last topic hierarchy entity"
      isPOI:
        type: boolean
        description: boolean value indicating if the dataset contains points of interest
        default: false
      isLOI:
        type: boolean
        description: boolean value indicating if the dataset contains lines of interest
        default: false
      isAOI:
        type: boolean
        description: boolean value indicating if the dataset contains areas of interest
        default: false
      loiColor:
        type: string
        description: color name or color code (i.e. hex number) for lines of interest
      loiWidth:
        type: number
        format: int32  
        description: display width for lines of interest (number of pixels in leaflet)        
      loiDashArrayString:
        type: string
        description: sring of line stroke dash array for lines of interest (e.g. 20,20; see https://developer.mozilla.org/de/docs/Web/SVG/Attribute/stroke-dasharray)
      aoiColor:
        type: string
        description: color name or color code (i.e. hex number) for areas of interest
      poiSymbolBootstrap3Name:
        type: string
        description: If georesource is a POI then custom POI marker symbol can be set by specifying the name of a Bootstrap 3 glyphicon symbol (i.e. "home" for a home symbol or "education" for a students hat symbol)
      poiMarkerColor:
        type: string
        description: If georesource is a POI then custom POI marker color can be set by specifying one of the following color names
        enum:
          - white
          - red
          - orange
          - beige
          - green
          - blue
          - purple
          - pink
          - gray
          - black
      poiSymbolColor:
        type: string
        description: If georesource is a POI then custom POI symbol color can be set by specifying one of the following color names
        enum:
          - white
          - red
          - orange
          - beige
          - green
          - blue
          - purple
          - pink
          - gray
          - black
      jsonSchema:
            type: "string"
            description: "a JSON schema as string that defines the data model for this dataset. It can be used to validate the geoJsonString property."
      geoJsonString:
            type: "string"
            description: "a valid GeoJSON string containing the features consisting of a geometry and properties specific to the dataset"

  GeoresourcePATCHInputType:
    type: "object"
    required:
      - metadata
    properties:
      metadata:
        $ref: "#/definitions/CommonMetadataType"
      datasetName:
        type: string
        description: the meaningful name of the dataset
      allowedRoles:
        type: array
        description: list of role identifiers that have read access rights for this dataset
        items:
          type: string
      topicReference:
        type: string
        description: "id of the last topic hierarchy entity "
      isPOI:
        type: boolean
        description: boolean value indicating if the dataset contains points of interest
        default: false
      isLOI:
        type: boolean
        description: boolean value indicating if the dataset contains lines of interest
        default: false
      isAOI:
        type: boolean
        description: boolean value indicating if the dataset contains areas of interest
        default: false
      loiColor:
        type: string
        description: color name or color code (i.e. hex number) for lines of interest
      loiWidth:
        type: number
        format: int32  
        description: display width for lines of interest (number of pixels in leaflet)    
      loiDashArrayString:
        type: string
        description: sring of line stroke dash array for lines of interest (e.g. 20,20; see https://developer.mozilla.org/de/docs/Web/SVG/Attribute/stroke-dasharray)
      aoiColor:
        type: string
        description: color name or color code (i.e. hex number) for areas of interest
      poiSymbolBootstrap3Name:
        type: string
        description: If georesource is a POI then custom POI marker symbol can be set by specifying the name of a Bootstrap 3 glyphicon symbol (i.e. "home" for a home symbol or "education" for a students hat symbol)
      poiMarkerColor:
        type: string
        description: If georesource is a POI then custom POI marker color can be set by specifying one of the following color names
        enum:
          - white
          - red
          - orange
          - beige
          - green
          - blue
          - purple
          - pink
          - gray
          - black
      poiSymbolColor:
        type: string
        description: If georesource is a POI then custom POI symbol color can be set by specifying one of the following color names
        enum:
          - white
          - red
          - orange
          - beige
          - green
          - blue
          - purple
          - pink
          - gray
          - black

  GeoresourcePUTInputType:
    type: "object"
    required:
      - periodOfValidity
      - geoJsonString
    properties:
      periodOfValidity:
        $ref: "#/definitions/PeriodOfValidityType"
      geoJsonString:
            type: "string"
            description: "a valid GeoJSON string containing the features consisting of a geometry and properties specific to the dataset"

  GeoresourceOverviewType:
    type: "object"
    required:
      - datasetName
      - georesourceId
      - metadata
      - availablePeriodsOfValidity
      - topicReference
      - isPOI
      - isLOI
      - isAOI
      - wmsUrl
      - wfsUrl
    properties:
      datasetName:
        type: string
        description: the meaningful name of the dataset
      georesourceId:
        type: string
        description: the unique identifier of the dataset
      metadata:
        $ref: "#/definitions/CommonMetadataType"
      availablePeriodsOfValidity:
        $ref: "#/definitions/AvailablePeriodsOfValidityType"
      topicReference:
        type: string
        description: "id of the last topic hierarchy entity "
      allowedRoles:
        type: array
        description: list of role identifiers that have read access rights for this dataset
        items:
          type: string
      isPOI:
        type: boolean
        description: boolean value indicating if the dataset contains points of interest
      isLOI:
        type: boolean
        description: boolean value indicating if the dataset contains lines of interest
        default: false
      isAOI:
        type: boolean
        description: boolean value indicating if the dataset contains areas of interest
        default: false
      loiColor:
        type: string
        description: color name or color code (i.e. hex number) for lines of interest
      loiWidth:
        type: number
        format: int32  
        description: display width for lines of interest (number of pixels in leaflet)    
      loiDashArrayString:
        type: string
        description: sring of line stroke dash array for lines of interest (e.g. 20,20; see https://developer.mozilla.org/de/docs/Web/SVG/Attribute/stroke-dasharray)
      aoiColor:
        type: string
        description: color name or color code (i.e. hex number) for areas of interest
      poiSymbolBootstrap3Name:
        type: string
        description: If georesource is a POI then custom POI marker symbol can be set by specifying the name of a Bootstrap 3 glyphicon symbol (i.e. "home" for a home symbol or "education" for a students hat symbol)
      poiMarkerColor:
        type: string
        description: If georesource is a POI then custom POI marker color can be set by specifying one of the following color names
        enum:
          - white
          - red
          - orange
          - beige
          - green
          - blue
          - purple
          - pink
          - gray
          - black
      poiSymbolColor:
        type: string
        description: If georesource is a POI then custom POI symbol color can be set by specifying one of the following color names
        enum:
          - white
          - red
          - orange
          - beige
          - green
          - blue
          - purple
          - pink
          - gray
          - black
      wmsUrl:
        type: string
        description: the URL of a running WMS instance serving the spatial features of the associated dataset
      wfsUrl:
        type: string
        description: the URL of a running WFS instance serving the spatial features of the associated dataset

  CommonMetadataType:
    type: object
    required:
      - description
      - sridEPSG
      - datasource
      - contact
      - updateInterval
    properties:
      description:
        type: string
        description: description of the dataset
      sridEPSG:
        type: number
        format: int32
        description: the coordinate reference system of the dataset as EPSG code
      datasource:
        type: string
        description: information about the origin/source of the dataset
      databasis:
        type: string
        description: information about data used as a basis to generate the dataset
      note:
        type: string
        description: an optional note with background information about the dataset
      literature:
        type: string
        description: an optional hint to literature about the dataset (e.g. URL or book/article name)
      contact:
        type: string
        description: contact details where additional information can be achieved
      lastUpdate:
        type: string
        format: date
        description: a timestamp representing the lastUpdate according to ISO 8601 (e.g. 2018-01-30)
      updateInterval:
        type: string
        enum:
          - "ARBITRARY"
          - "DAILY"
          - "WEEKLY"
          - "MONTHLY"
          - "QUARTERLY"
          - "HALF_YEARLY"
          - "YEARLY"

  PeriodOfValidityType:
    type: object
    description: definition of the period of validity of a certain dataset
    required:
      - startDate
    properties:
      startDate:
        type: string
        format: date
        description: a timestamp representing the starting date according to ISO 8601 (e.g. 2018-01-30)
      endDate:
        type: string
        format: date
        description: an optional timestamp representing the ending date according to ISO 8601 (e.g. 2018-01-30). The parameter can be omitted, if the end date is unknown.

  AvailablePeriodsOfValidityType:
    type: array
    description: "array of periods of validity, each consisting of a start and end date"
    items:
      $ref: "#/definitions/PeriodOfValidityType"

  IndicatorReferenceType:
    type: object
    description: a reference to another indicator, e.g. a sub-indicator that is used to compute the main indicator
    required:
      - referencedIndicatorId
      - referencedIndicatorName
      - referencedIndicatorDescription
    properties:
      referencedIndicatorId:
        type: string
        description: unique identifier of the referenced indicator
      referencedIndicatorName:
        type: string
        description: the meaningful name of the referenced indicator
      referencedIndicatorDescription:
        type: string
        description: a meaningful description of how the referenced indicator is related to the main indicator

  GeoresourceReferenceType:
    type: object
    description: a reference to georesource, e.g. a resource that is used to compute the main indicator
    required:
      - referencedGeoresourceId
      - referencedGeoresourceName
      - referencedGeoresourceDescription
    properties:
      referencedGeoresourceId:
        type: string
        description: unique identifier of the referenced georesource
      referencedGeoresourceName:
        type: string
        description: the meaningful name of the referenced georesource
      referencedGeoresourceDescription:
        type: string
        description: a meaningful description of how the referenced georesource is related to the main indicator

  IndicatorOverviewType:
    type: object
    required:
      - indicatorName
      - characteristicValue
      - indicatorId
      - unit
      - metadata
      - processDescription
      - creationType
      - applicableSpatialUnits
      - applicableDates
      - topicReference
      - ogcServices
      - abbreviation
      - isHeadlineIndicator
      - interpretation
      - tags
    properties:
      indicatorName:
        type: "string"
        description: "name of the indicator"
      characteristicValue:
        type: string
        description: the distuingishing characteristic value of the indicator
      indicatorId:
        type: string
        description: unique identifier of this resource
      indicatorType:
        type: string
        description: indicates whether the indicator is a status indicator (values represent the extent of the watched phenomenon for a certain point in time) or a dynamic indicator (values represent the change of extent of the watched phenomenon within a certain period of time)
        enum:
          - STATUS_ABSOLUTE
          - DYNAMIC_ABSOLUTE
          - STATUS_RELATIVE
          - DYNAMIC_RELATIVE
          - STATUS_STANDARDIZED
          - DYNAMIC_STANDARDIZED
      unit:
        type: string
        description: unit of the indicator values
      metadata:
        $ref: "#/definitions/CommonMetadataType"
      processDescription:
        type: string
        description: description about how the indicator was computed
      applicableSpatialUnits:
        description: "array of spatial unit levels for which the dataset is applicable"
        type: array
        items:
          $ref: "#/definitions/IndicatorSpatialUnitJoinItem"
      applicableDates:
        type: "array"
        description: array of applicable dates (year and month and day as YEAR-MONTH-DAY) according to ISO 8601 (e.g. 2018-01-30)
        items:
          type: string
      topicReference:
        type: string
        description: "id of the last topic hierarchy entity "
      allowedRoles:
        type: array
        description: list of role identifiers that have read access rights for this dataset
        items:
          type: string
      referencedIndicators:
        type: array
        description: list of references to other indicators
        items:
          $ref: "#/definitions/IndicatorReferenceType"
      referencedGeoresources:
        type: array
        description: list of references to georesources
        items:
          $ref: "#/definitions/GeoresourceReferenceType"
      creationType:
        type: string
        description: indicates if the data is simply inserted (INSERTION), computed by an automated script (COMPUTATION) or automatically aggregated by a script (AGGREGATION)
        enum:
          - INSERTION
          - COMPUTATION
          - AGGREGATION
      lowestSpatialUnitForComputation:
        type: string
        description: identifier/name of the lowest spatial unit for which the indicator can be computed and thus is available (only necessary for computable indicators)
      defaultClassificationMapping:
        $ref: "#/definitions/DefaultClassificationMappingType"
      ogcServices:
        type: array
        description: list of available OGC services for that indicator for different spatial units
        items:
          $ref: "#/definitions/OgcServicesType"
      abbreviation:
        type: "string"
        description: "abbreviated mark of the indicator"
      interpretation:
        type: "string"
        description: "interpretation of the indicator values"
      isHeadlineIndicator:
        type: boolean
        description: boolean value indicating if the indicator is a headline indicator
        default: false
      tags:
        type: array
        description: list of tag labels for the indicator
        items:
          type: string

  OgcServicesType:
    type: "object"
    required:
      - wmsUrl
      - wfsUrl
      - defaultStyleName
      - spatialUnit
    properties:
      spatialUnit:
        type: string
        description: the name of the spatial unit
      wmsUrl:
        type: string
        description: the URL of a running WMS instance serving the spatial features of the associated dataset
      wfsUrl:
        type: string
        description: the URL of a running WFS instance serving the spatial features of the associated dataset
      defaultStyleName:
        type: string
        description: the name of the default style (SLD) that is published and applied to the associated dataset

  IndicatorPropertiesWithoutGeomType:
    type: "object"
    required:
      - ID
      - NAME
      - validStartDate
    properties:
      ID:
        type: string
        description: the id of the spatial feature
      NAME:
        type: string
        description: the name of the spatial feature
      validStartDate:
        type: string
        description: the start date from which on the spatial feature is valid
      validEndDate:
        type: string
        description: the end date until the spatial feature is valid - or null if not set
    additionalProperties:
        type: string

  IndicatorPOSTInputType:
    type: "object"
    required:
      - datasetName
      - applicableSpatialUnit
      - topicReference
      - metadata
      - processDescription
      - unit
      - creationType
      - defaultClassificationMapping
      - isHeadlineIndicator
      - interpretation
    properties:
      datasetName:
        type: string
        description: the meaningful name of the indicator
      characteristicValue:
        type: string
        description: the distuingishing characteristic value of the indicator
      indicatorType:
        type: string
        description: indicates whether the indicator is a status indicator (values represent the extent of the watched phenomenon for a certain point in time) or a dynamic indicator (values represent the change of extent of the watched phenomenon within a certain period of time)
        enum:
          - STATUS_ABSOLUTE
          - DYNAMIC_ABSOLUTE
          - STATUS_RELATIVE
          - DYNAMIC_RELATIVE
          - STATUS_STANDARDIZED
          - DYNAMIC_STANDARDIZED
      topicReference:
        type: string
        description: "id of the last topic hierarchy entity "
      metadata:
        $ref: "#/definitions/CommonMetadataType"
      processDescription:
        type: string
        description: description about how the indicator was computed
      unit:
        type: string
        description: unit of the indicator values
      creationType:
        type: string
        description: indicates if the data is simply inserted (INSERTION), computed by an automated script (COMPUTATION) or automatically aggregated by a script (AGGREGATION)
        enum:
          - INSERTION
          - COMPUTATION
          - AGGREGATION
      abbreviation:
        type: "string"
        description: "abbreviated mark of the indicator"
      interpretation:
        type: "string"
        description: "interpretation of the indicator values"
      isHeadlineIndicator:
        type: boolean
        description: boolean value indicating if the indicator is a headline indicator
        default: false
      tags:
        type: array
        description: list of tag labels for the indicator
        items:
          type: string
      lowestSpatialUnitForComputation:
        type: string
        description: identifier/name of the lowest spatial unit for which the indicator can be computed and thus is available (only necessary for computable indicators)
      defaultClassificationMapping:
        $ref: "#/definitions/DefaultClassificationMappingType"
      allowedRoles:
        type: array
        description: list of role identifiers that have read access rights for this dataset
        items:
          type: string
      refrencesToOtherIndicators:
        type: array
        description: "array of references to other indicators. E.g., if an indicator is defined by combining four other indicators, then the identifiers of those other indicators can be referenced here"
        items:
          type: object
          properties:
            indicatorId:
              type: string
              description: identifier of the referenced indicator
            referenceDescription:
              type: string
              description: short description of how the indicator is referenced to the superior one
      refrencesToGeoresources:
        type: array
        description: "array of references to other georesource datasets. E.g., if an indicator is defined by performing geometric-topological operations, then the identifiers of those required georesources can be referenced here"
        items:
          type: object
          properties:
            georesourceId:
              type: string
              description: identifier of the referenced georesource
            referenceDescription:
              type: string
              description: short description of how the georesource is referenced to the indicator

  DefaultClassificationMappingType:
    type: "object"
    properties:
      colorBrewerSchemeName:
        type: string
        description: "the name of the colorBrewer color scheme used to define the colors for classification (see project http://colorbrewer2.org/#type=sequential&scheme=BuGn&n=3 for colorSchemes). Set to 'INDIVIDUAL' if colors are set arbitrarily."
      items:
        type: array
        description: "array of classification mapping items. The order of the items corresponds to indicator value intervals from low to high. The number of items represents the number of classes. In combination they represent the default classification and mapping to custom rating of the indicator values"
        items:
          $ref: "#/definitions/DefaultClassificationMappingItemType"

  DefaultClassificationMappingItemType:
    type: "object"
    required:
      - defaultColorAsHex
      - defaultCustomRating
    properties:
      defaultColorAsHex:
        type: string
        description: "the default color for the specified value interval as hex string inclusive leading #, i.e. '#ffffff'"
      defaultCustomRating:
        type: string
        description: "the default custom rating string for the specified value interval, i.e. 'very high'/'very low' or 'good'/'bad'"

  IndicatorMetadataPATCHInputType:
    type: "object"
    required:
      - topicReference
      - metadata
      - unit
      - processDescription
      - isHeadlineIndicator
      - interpretation
    properties:
      datasetName:
        type: string
        description: the meaningful name of the indicator
      characteristicValue:
        type: string
        description: the distuingishing characteristic value of the indicator
      indicatorType:
        type: string
        description: indicates whether the indicator is a status indicator (values represent the extent of the watched phenomenon for a certain point in time) or a dynamic indicator (values represent the change of extent of the watched phenomenon within a certain period of time)
        enum:
          - STATUS_ABSOLUTE
          - DYNAMIC_ABSOLUTE
          - STATUS_RELATIVE
          - DYNAMIC_RELATIVE
          - STATUS_STANDARDIZED
          - DYNAMIC_STANDARDIZED
      creationType:
        type: string
        description: indicates if the data is simply inserted (INSERTION), computed by an automated script (COMPUTATION) or automatically aggregated by a script (AGGREGATION)
        enum:
          - INSERTION
          - COMPUTATION
          - AGGREGATION
      topicReference:
        type: string
        description: "id of the last topic hierarchy entity "
      metadata:
        $ref: "#/definitions/CommonMetadataType"
      processDescription:
        type: string
        description: description about how the indicator was computed
      unit:
        type: string
        description: unit of the indicator values
      allowedRoles:
        type: array
        description: list of role identifiers that have read access rights for this dataset
        items:
          type: string
      lowestSpatialUnitForComputation:
        type: string
        description: identifier/name of the lowest spatial unit for which the indicator can be computed and thus is available (only necessary for computable indicators)
      defaultClassificationMapping:
        $ref: "#/definitions/DefaultClassificationMappingType"
      abbreviation:
        type: "string"
        description: "abbreviated mark of the indicator"
      interpretation:
        type: "string"
        description: "interpretation of the indicator values"
      isHeadlineIndicator:
        type: boolean
        description: boolean value indicating if the indicator is a headline indicator
        default: false
      tags:
        type: array
        description: list of tag labels for the indicator
        items:
          type: string
      refrencesToOtherIndicators:
        type: array
        description: "array of references to other indicators. E.g., if an indicator is defined by combining four other indicators, then the identifiers of those four indicators can be referenced here"
        items:
          type: object
          properties:
            indicatorId:
              type: string
              description: identifier of the referenced indicator
            referenceDescription:
              type: string
              description: short description of how the indicator is referenced to the superior one
      refrencesToGeoresources:
        type: array
        description: "array of references to other georesource datasets. E.g., if an indicator is defined by performing geometric-topological operations, then the identifiers of those required georesources can be referenced here"
        items:
          type: object
          properties:
            georesourceId:
              type: string
              description: identifier of the referenced georesource
            referenceDescription:
              type: string
              description: short description of how the georesource is referenced to the indicator

  IndicatorPUTInputType:
    type: "object"
    required:
      - applicableSpatialUnit
      - indicatorValues
    properties:
      defaultClassificationMapping:
        $ref: "#/definitions/DefaultClassificationMappingType"
      applicableSpatialUnit:
        type: string
      indicatorValues:
        type: array
        description: an array of entries containing indicator values and mapping to spatial features via identifiers
        items:
          type: object
          properties:
            spatialReferenceKey:
              type: string
              description: identifier (uuid) of the spatial feature to which the values shall be applied
            valueMapping:
              type: array
              description: an array of entries mapping an indicator value to a timestamp as mapping key
              items:
                type: object
                properties:
                  timestamp:
                    type: string
                    format: date
                    description: timestamp consisting of year, month and day according to ISO 8601 (e.g. 2018-01-30)
                  indicatorValue:
                    type: number
                    format: float
                    description: the numeric extent of the indicator for the timestamp
      allowedRoles:
        type: array
        description: list of role identifiers that have read access rights for this dataset
        items:
          type: string

  IndicatorPATCHInputType:
    type: "object"
    properties:
      defaultClassificationMapping:
        $ref: "#/definitions/DefaultClassificationMappingType"
      allowedRoles:
        type: array
        description: list of role identifiers that have read access rights for this dataset
        items:
          type: string


  IndicatorSpatialUnitJoinItem:
    type: "object"
    required:
      - spatialUnitId
      - spatialUnitName
    properties:
      spatialUnitId:
        type: string
        description: "ID of the applicable spatial unit"
      spatialUnitName:
        type: string
        description: "name of the applicable spatial unit"
      allowedRoles:
        type: array
        description: list of role identifiers that have read access rights for this dataset
        items:
          type: string




externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
